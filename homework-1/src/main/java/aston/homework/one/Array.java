package aston.homework.one;

import java.util.Comparator;

/**
 * Базовый массив.
 *
 * @param <E> тип элементов в этом массиве.
 *
 * @author Максим Яськов
 * @see Iterable
 */

public interface Array<E> extends Iterable<E> {

    /**
     * Проверяет, находится ли указанный элемент в этом массиве.
     *
     * @param element проверяемый элемент
     * @return true если массив содержит указанных элемент, в противном случае false
     */
    default boolean contains(E element) {
        return indexOf(element) != -1;
    }

    /**
     * Возвращает элемент по указанному индексу.
     *
     * @param index индекс возвращаемого элемента
     * @return элемент по указанному индексу в этом списке
     * @throws IndexOutOfBoundsException если указанный индекс выходит за допустимый диапазон
     */
    E get(int index);

    /**
     * Возвращает индекс первого вхождения указанного элемента.
     *
     * @param element элемент, индекс первого вхождения которого будет возвращен
     * @return индекс первого вхождения указанного элемента или -1 если элемент не найден
     */
    int indexOf(E element);

    /**
     * Возвращает индекс последнего вхождения указанного элемента.
     *
     * @param element элемент, индекс последнего вхождения которого будет возвращен
     * @return индекс последнего вхождения указанного элемента или -1 если элемент не найден
     */
    int lastIndexOf(E element);

    /**
     * Заменяет в этом массиве текущий элемент по указанному индексу указанным элементом.
     *
     * @param index индекс заменяемого элемента
     * @param element элемент, который будет установлен в этот массив по указанному индексу
     * @return замененный элемент
     * @throws IndexOutOfBoundsException если указанный индекс выходит за допустимый диапазон
     */
    E set(int index, E element);

    /**
     * Возвращает количество элементов в этом массиве.
     *
     * @return количество элементов в этом массиве
     */
    int size();

    /**
     * Сортирует этот массив.
     *
     * @param comparator компаратор для сравнения сортируемых элементов.
     */
    void sort(Comparator<E> comparator);

    /**
     * Возвращает новый массив, содержащий все элементы этого списка в правильной последовательности.
     *
     * @return новый массив, содержащий все элементы этого списка в правильной последовательности
     */
    Object[] toArray();

    /**
     * Возвращает массив, содержащий все элементы этого списка в правильной последовательности.
     * Тип возвращаемого массива соответствует указанному массиву.
     * Если список помещается в указанный массив, он копируется туда, в противном случае выделяется новый массив.
     *
     * @param a массив, в котором должны храниться элементы списка, если он достаточно велик, в противном случае выделяется новый массив того же типа.
     * @return массив, содержащий все элементы этого списка в правильной последовательности
     * @throws ArrayStoreException если тип указанного массива не является супертипом типа каждого элемента в этом списке
     * @throws NullPointerException если указанный массив имеет значение NULL
     */
    <T> T[] toArray(T[] a);

}
